{"version":3,"file":"segu.umd.js","sources":["../src/lens.js","../src/math.js","../src/units.js"],"sourcesContent":["export class Lens {\n\n  constructor ({\n    unit = 1,\n    is = 1,\n    as = 1,\n    min = 0,\n    max = 1,\n    grid = 1,\n    origin = 0\n  } = {}) {\n    this.data = { unit, is, as, min, max, grid, origin }\n    // Would improve flexibility by wrapping all getters in Lens with this, allowing Units and Lens to use the same normalization function\n    // this.normalize = normalize || Units.normalize\n  }\n\n  get unit () {\n    return this.data.unit || this.data.is || 1\n  }\n\n  get is () {\n    return this.data.is || this.unit\n  }\n\n  get as () {\n    return this.data.as || this.unit\n  }\n\n  get min () {\n    return this.data.min || 0\n  }\n\n  get max () {\n    return this.data.max || Number.MAX_SAFE_INTEGER\n  }\n\n  get grid () {\n    return this.data.grid || 1\n  }\n\n  get origin () {\n    return this.data.origin || 0\n  }\n\n  use (data) {\n    return Object.assign({}, this.data, data)\n  }\n\n  assign (data) {\n    this.data = this.use(data)\n\n    return this\n  }\n\n}\n","/**\n * Recursively calculates the greatest common denominator (GCD) between two values\n *\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n */\nexport function gcd (x, y) {\n  return y === 0 ? x : gcd(y, x % y)\n}\n\n/**\n * Modifies a value so that it is always between x and y\n *\n * @param {Number} value\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n */\nexport function clamp (value, x = 0, y = 1) {\n  return Math.min(y, Math.max(x, value))\n}\n\n/**\n * Interpolation function returning the value between x and y at a specific ratio\n *\n * @param {Number} value\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n */\nexport function lerp (ratio, x, y) {\n  return (x * (1 - ratio)) + (y * ratio)\n}\n\n/**\n * Interpolation function returning the ratio of a value clamped between x and y\n *\n * @param {Number} value\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n */\n\nexport function invlerp (value, x, y) {\n  return clamp((value - x) / (y - x))\n}\n\n/**\n * Cycles a value around an range (from x to y).\n *\n * @param {Number} value\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n*/\nexport function cyclic (value, x, y) {\n  return (value >= x ? value : value + y) % y\n}\n\n/**\n * Projects a value given a source domain (from) to a target domain (to).\n * Domains are provided as range tuples ([min, max]).\n *\n * @param {Number} value\n * @param {Array<Number>} from\n * @param {Array<Number>} to\n * @returns {Number}\n */\nexport function project (value, from = [0, 0], to = [0, 0]) {\n  return (value - from[0]) / (from[1] - from[0]) * (to[1] - to[0]) + to[0]\n}\n\n/**\n * Determines the element found in an array at a given ratio\n *\n * @param {Float} ratio\n * @param {Array} all\n */\nexport function steps (ratio, all) {\n  ratio %= 1\n\n  if (ratio < 0) ratio += 1\n\n  return all[Math.floor(ratio * all.length)]\n}\n","// TODO: Support calc method for allowing conversion of units via string (like CSS):\n//  - e.g. calc(1mile - 500px)\n\nimport { Lens } from './lens'\nimport { gcd, cyclic, clamp, lerp, invlerp } from './math'\n\nexport class Units {\n\n  constructor ({\n    map = {},\n    lens = {}\n  } = {}) {\n    this.map = map\n    this.lens = new Lens(lens)\n  }\n\n  normalize (unit) {\n    if (typeof unit === 'number') {\n      return unit\n    }\n\n    if (typeof unit === 'string') {\n      const value = this.map[unit] || 1\n\n      return typeof value === 'function' ? value(unit, this) : Number(value)\n    }\n\n    return 1\n  }\n\n  scope (value = 1, lens = this.lens) {\n    const { is, as, min, max, origin } = this.lens.use(lens)\n    const index = this.cast(value - origin, { is, as })\n    const head = this.cast(min || 0, { is, as })\n    const tail = this.cast(max || value, { is, as })\n\n    return { value, index, head, tail }\n  }\n\n  // TODO: Allow `is` and `as` to be provided as mapping functions\n  cast (value = 1, { is = this.lens.unit, as = this.lens.unit } = {}) {\n    return this.normalize(value) / (this.normalize(as) / this.normalize(is))\n  }\n\n  snap (value, lens = this.lens) {\n    const { index } = this.scope(value, lens)\n    const unit = this.normalize(lens.as || lens.unit)\n    const calc = typeof lens.calc === 'function' ? lens.calc : Math.floor\n\n    return calc(index) * unit\n  }\n\n  clamp (value, lens) {\n    const { index, head, tail } = this.scope(value, lens)\n\n    return clamp(index, head, tail)\n  }\n\n  cyclic (value, lens) {\n    const { index, head, tail } = this.scope(value, lens)\n\n    return cyclic(index, head, tail)\n  }\n\n  lerp (ratio, lens) {\n    const { head, tail } = this.scope(0, lens)\n\n    return lerp(ratio, head, tail)\n  }\n\n  invlerp (value, lens) {\n    const { index, head, tail } = this.scope(value, lens)\n\n    return invlerp(index, head, tail)\n  }\n\n  delta (value, lens) {\n    const { index, head } = this.scope(value, lens)\n\n    return index - head\n  }\n\n  range (value, lens) {\n    const { head, tail } = this.scope(value, lens)\n\n    return tail - head\n  }\n\n  progress (value, lens) {\n    const delta = this.delta(value, lens)\n    const range = this.range(value, lens)\n\n    return delta / range\n  }\n\n  fold (value, lens = this.lens) {\n    const grid = lens.grid || 1\n    const basis = gcd(value, grid)\n    const size = this.clamp(value, lens)\n    const container = this.snap(size, { as: basis })\n    const ratio = Math.max(1, Math.min(value / basis, grid))\n    const min = value >= grid ? grid : basis\n\n    return Math.max(min, this.snap(container, { as: ratio }))\n  }\n\n  // Changes the base unit to the provided key by recalculating and replacing the unit map pairs.\n  // TODO: Test, and ensure that the base unit is equal to 1 (or, could just use scale)\n  rebase (unit = this.lens.unit) {\n    if (unit === this.lens.unit) return this\n\n    const map = Object.entries(this.map)\n      .reduce((map, [key, value]) => Object.assign(map, {\n        [key]: this.cast(value, { is: this.lens.is, as: unit })\n      }, { [unit]: 1 }))\n\n    this.map = map\n    this.lens.unit = unit\n\n    return this\n  }\n\n  clone (props) {\n    const map = Object.assign({}, this.map, props.map)\n    const lens = Object.assign({}, this.lens, props.lens)\n\n    return new Units({ map, lens })\n  }\n\n  static use (props) {\n    return new Units(props)\n  }\n}\n\nexport const units = props => new Units(props)\n"],"names":["Lens","unit","is","as","min","max","grid","origin","data","Number","MAX_SAFE_INTEGER","Object","assign","use","gcd","x","y","clamp","value","Math","lerp","ratio","invlerp","cyclic","project","from","to","steps","all","floor","length","Units","map","lens","index","cast","head","tail","normalize","scope","calc","delta","range","basis","size","container","snap","entries","reduce","key","props","units"],"mappings":"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"}