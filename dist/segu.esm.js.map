{"version":3,"file":"segu.esm.js","sources":["../src/lens.js","../src/math.js","../src/units.js"],"sourcesContent":["export class Lens {\n\n  constructor ({\n    unit = 1,\n    is = 1,\n    as = 1,\n    min = 0,\n    max = 1,\n    grid = 1,\n    origin = 0\n  } = {}) {\n    this.data = { unit, is, as, min, max, grid, origin }\n    // Would improve flexibility by wrapping all getters in Lens with this, allowing Units and Lens to use the same normalization function\n    // this.normalize = normalize || Units.normalize\n  }\n\n  get unit () {\n    return this.data.unit || this.data.is || 1\n  }\n\n  get is () {\n    return this.data.is || this.unit\n  }\n\n  get as () {\n    return this.data.as || this.unit\n  }\n\n  get min () {\n    return this.data.min || 0\n  }\n\n  get max () {\n    return this.data.max || Number.MAX_SAFE_INTEGER\n  }\n\n  get grid () {\n    return this.data.grid || 1\n  }\n\n  get origin () {\n    return this.data.origin || 0\n  }\n\n  use (data) {\n    return Object.assign({}, this.data, data)\n  }\n\n  assign (data) {\n    this.data = this.use(data)\n\n    return this\n  }\n\n}\n","/**\n * Recursively calculates the greatest common denominator (GCD) between two values\n *\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n */\nexport function gcd (x, y) {\n  return y === 0 ? x : gcd(y, x % y)\n}\n\n/**\n * Modifies a value so that it is always between x and y\n *\n * @param {Number} value\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n */\nexport function clamp (value, x = 0, y = 1) {\n  return Math.min(y, Math.max(x, value))\n}\n\n/**\n * Interpolation function returning the value between x and y at a specific ratio\n *\n * @param {Number} value\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n */\nexport function lerp (ratio, x, y) {\n  return (x * (1 - ratio)) + (y * ratio)\n}\n\n/**\n * Interpolation function returning the ratio of a value clamped between x and y\n *\n * @param {Number} value\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n */\n\nexport function invlerp (value, x, y) {\n  return clamp((value - x) / (y - x))\n}\n\n/**\n * Cycles a value around an range (from x to y).\n *\n * @param {Number} value\n * @param {Number} x\n * @param {Number} y\n * @returns {Number}\n*/\nexport function cyclic (value, x, y) {\n  return (value >= x ? value : value + y) % y\n}\n\n/**\n * Determines the element found in an array at a given ratio\n *\n * @param {Float} ratio\n * @param {Array} all\n */\nexport function steps (ratio, all) {\n  ratio %= 1\n\n  if (ratio < 0) ratio += 1\n\n  return all[Math.floor(ratio * all.length)]\n}\n","import { Lens } from './lens'\nimport { gcd, cyclic, clamp, lerp, invlerp } from './math'\n\nexport class Units {\n\n  constructor ({\n    map = {},\n    lens = {}\n  } = {}) {\n    this.map = map\n    this.lens = new Lens(lens)\n  }\n\n  normalize (unit) {\n    if (typeof unit === 'number') {\n      return unit\n    }\n\n    if (typeof unit === 'string') {\n      const value = this.map[unit] || 1\n\n      return typeof value === 'function' ? value(unit) : Number(value)\n    }\n\n    return 1\n  }\n\n  scope (value = 1, lens = this.lens) {\n    const { is, as, min, max, origin } = this.lens.use(lens)\n    const index = this.cast(value - origin, { is, as })\n    const head = this.cast(min || 0, { is, as })\n    const tail = this.cast(max || value, { is, as })\n\n    return { value, index, head, tail }\n  }\n\n  cast (value = 1, { is = this.lens.unit, as = this.lens.unit } = {}) {\n  // cast (value = 1, { is = this.lens.is, as = this.lens.as } = {}) {\n    return this.normalize(value) / (this.normalize(as) / this.normalize(is))\n  }\n\n  snap (value = 1, { to = this.lens.unit, calc = Math.floor } = {}) {\n    const unit = this.normalize(to)\n    const adjust = typeof calc === 'function' ? calc : _ => _\n    const output = adjust(value / unit) * unit\n\n    return this.normalize(output || 0)\n  }\n\n  clamp (value, lens) {\n    const { index, head, tail } = this.scope(value, lens)\n\n    return clamp(index, head, tail)\n  }\n\n  cyclic (value, lens) {\n    const { index, head, tail } = this.scope(value, lens)\n\n    return cyclic(index, head, tail)\n  }\n\n  lerp (ratio, lens) {\n    const { head, tail } = this.scope(0, lens)\n\n    return lerp(ratio, head, tail)\n  }\n\n  invlerp (value, lens) {\n    const { index, head, tail } = this.scope(value, lens)\n\n    return invlerp(index, head, tail)\n  }\n\n  delta (value, lens) {\n    const { index, head } = this.scope(value, lens)\n\n    return index - head\n  }\n\n  range (value, lens) {\n    const { head, tail } = this.scope(value, lens)\n\n    return tail - head\n  }\n\n  progress (value, lens) {\n    const delta = this.delta(value, lens)\n    const range = this.range(value, lens)\n\n    return delta / range\n  }\n\n  fold (value, lens = this.lens) {\n    const grid = lens.grid || 1\n    const basis = gcd(value, grid)\n    const size = this.clamp(value, lens)\n    const container = this.snap(size, { to: basis })\n    const ratio = Math.max(1, Math.min(value / basis, grid))\n    const min = value >= grid ? grid : basis\n\n    return Math.max(min, this.snap(container, { to: ratio }))\n  }\n\n  // Changes the base unit to the provided key by recalculating and replacing the unit map pairs.\n  // TODO: Test, and ensure that the base unit is equal to 1 (or, could just use scale)\n  rebase (unit = this.lens.unit) {\n    if (unit === this.lens.unit) return this\n\n    const map = Object.entries(this.map)\n      .reduce((map, [key, value]) => Object.assign(map, {\n        [key]: this.cast(value, { is: this.lens.is, as: unit })\n      }, { [unit]: 1 }))\n\n    this.map = map\n    this.lens.unit = unit\n\n    return this\n  }\n\n  clone (props) {\n    const map = Object.assign({}, this.map, props.map)\n    const lens = Object.assign({}, this.lens, props.lens)\n\n    return new Units({ map, lens })\n  }\n\n  static use (props) {\n    return new Units(props)\n  }\n}\n\nexport const units = props => new Units(props)\n"],"names":[],"mappings":"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"}